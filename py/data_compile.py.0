import numpy as np
#import pandas as pd 
import datetime as dt
import os
import glob
#import h5py
import paramiko

def GetData(workstation):
    """
    This function gets instrument info and data
    Connects via paramiko using input list
    Grabs a file with instrument names
    Then compares instrument structure
    Then grabs files
    """
    # Connects to SSH via paramiko
    print("Connecting to workstation: ", workstation[1])
    client = paramiko.SSHClient()
    client.load_system_host_keys()
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy)
    client.connect(workstation[0],username = workstation[1])
    
    # Transfers from RootData/Instruments with SFTP
    print("...Getting instruments file.")
    instrumentdir = os.path.join(workstation[2],'Instruments')
    instrumentfile = os.path.join(workstation[2],'Instruments',
            'inst_names.txt')
    localinst = os.path.join('/home/anton/CRAC/Data/',workstation[1],
            'Instruments')
    sftp = client.open_sftp()
    sftp.get(instrumentfile,os.path.join(localinst,'inst_names.txt'))
    
    # Get instrument names from file 
    print("...Parsing names from instruments file.")
    instnames = []
    with open(os.path.join(localinst,'inst_names.txt'), 'r') as names:
        for name in names:
            n = name.strip('\n')
            instnames.append(n)
    print("......Found remote instruments: ", instnames)
    # Comparing instrument folders and making new folders if
    # ... necessary
    locinstfolders = []
    for folder in (entry for entry in
            os.scandir(path=localinst) if entry.is_dir()):
        locinstfolders.append(folder.name)
    print("......Found local instruments: ", locinstfolders)
    setlocalinst = set(locinstfolders)
    setremoteinst = set(instnames)
    setinstdiff = setremoteinst.difference(setlocalinst)

    if not setinstdiff:
        print("......No new instruments.")
    else:
        print("......New instruments found: ", setinstdiff)
    
    for instdirname in setinstdiff:
        os.mkdir(os.path.join(localinst,instdirname))
        print(".........Created new instrument folder: ",
                instdirname)

    # Get all the new Data
    print("...Getting data...")
    ## Maybe at some point this can be done with regex
    for inst in instnames:
        locinstdir = os.path.join(localinst,inst)
        print("......Looking at instrument: ", inst)
        # get folder names from local
        locfolders = []
        for folder in (entry for entry in 
                os.scandir(path=locinstdir) if entry.is_dir()):
            locfolders.append(folder.name)    
        print(".........Finding local folders: ",locfolders)

        # get folder names from remote
        reminstdir = os.path.join(instrumentdir,inst)
        if workstation[3] == 'W':
            cmmd = 'dir ' + workstation[2] + 'Instruments\\' + \
                    inst + ' /b /a:d'
        if workstation[3] == 'L': ##### NEED TO CHECK THIS ONE
            cmmd = 'find ' + reminstdir + \
                ' -maxdepth 1 -type d -printf %f'
        stdin, stdout, stderr = client.exec_command(cmmd)
        remfolders = []
        for line in stdout:
            remfolders.append(line.rstrip())
        
        print(".........Finding remote folders: ",remfolders)
        # get difference between remote and local
        # we assume remote has MORE or EQUAL folders than local
        setlocal = set(locfolders)
        setremote = set(remfolders)
        setdiff = setremote.difference(setlocal)
        if not setdiff:
            print(".........Nothing new at this location.")
        else:
            print(".........Found new folders: ", setdiff)

        # recursively sftp
        for foldername in setdiff:
            # local and remote data folder path
            locdatafolder = os.path.join(locinstdir,foldername)
            remdatafolder = os.path.join(reminstdir,foldername)
            # make local tree
            os.mkdir(locdatafolder)
            print("............Created new folder: ", locdatafolder)
            # list files in remote folder
            files2copy = sftp.listdir(path=remdatafolder)
            # copy them all
            for datafile in files2copy:
                print("............Now trying to copy: ",datafile)
                try:
                    sftp.get(os.path.join(remdatafolder,datafile),
                            os.path.join(locdatafolder,datafile))
                except:
                    print('...............There was an error trying to copy ',
                            datafile)
    
    print("Closing connection to workstation: ", workstation[1])
    # Close SFTP and SSH
    sftp.close()
    client.close()
    
def FileName_Builder(rules):
    """
    This function grabs some rules and constructs filenames
    """
    return namelist

def Hierarchy_Reader():
    """
    """

def Attribute_Reader():
    """
    """

def Flag_Reader():
    """
    """
    
def Metadata_Decoder():
    """
    This function opens the metadata file and decodes the information
    to locate and structure variables
    """
    #How do we know where the metadata files are located ?

### Name of the file with ID and path to root data folder
print("Loading locations file.")
locationsfile = '/home/anton/CRAC/Data/locations.txt'
workstation_info = []

### Need the login information and location at data computers
with open(locationsfile, 'r') as locations:
    for line in locations:
        l = line.strip('\n')
        workstation_info.append(l.split())
print("Locations file loaded.")
print("Getting files from workstations.")
for workstation in workstation_info:
    GetData(workstation)

print("Writing to log file.")
timestamp = dt.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
output_log = "Script ran on: " + timestamp + '\n'
with open("/home/anton/CRAC/Data/collection.log","a") as file:
    file.write(output_log)
        
